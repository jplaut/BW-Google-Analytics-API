<?php
// $Id: google_analytics_api.module,v 1.21 2009/08/23 22:02:44 jkitching Exp $

require 'gapi.class.php';

/**
 * Implementation of hook_menu().
 */
function google_analytics_api_menu() {
  $items['admin/settings/google-analytics-api'] = array(
    'title' => t('Google Analytics API settings'),
    'description' => t('Manage the currently logged in Analytics account'),
    'page callback' => 'drupal_get_form',
    'file' => 'google_analytics_api.admin.inc',
    'page arguments' => array('google_analytics_api_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function google_analytics_api_perm() {
  return array('administer Google Analytics settings');
}

/**
 * Return current profile ID.
 */
function google_analytics_api_current_profile_id($silent = FALSE) {
  $profile_id = variable_get('google_analytics_api_profile_id', NULL);
  if (!$profile_id && !$silent) {
    drupal_set_message(t('A Google Analytics API method has been called that requires the selection of a Google Analytics profile.  Please visit the ' . l('administration page', 'admin/settings/google_analytics_api') . ' to set one.'));
  }
  return $profile_id;
}

/*
 * Retrieve current profile object.
 */
function google_analytics_api_current_profile() {
  $profiles = google_analytics_api_account_data();
  foreach ($profiles as $profile) {
    if ($profile->getProfileId() == google_analytics_api_current_profile_id()) {
      return $profile;
    }
  }
  return NULL;
}

/*
 * Programatically trigger a login.
 */
function google_analytics_api_authenticate() {
	$clientId = variable_get('google_analytics_api_client_id', NULL);
	$clientSecret = variable_get('google_analytics_api_client_secret', NULL);
  	gapiOAuth2::authenticate($clientId, $clientSecret);
	drupal_page_footer();
	exit;
}

/*
 * Programatically trigger a logout.
 */
function google_analytics_api_logout() {
  try {
    google_analytics_api_gapi()->revokeToken();
  	variable_del("google_analytics_api_client_id");
	variable_del("google_analytics_api_client_secret");
	variable_del("google_analytics_api_access_token");
	variable_del("google_analytics_api_expires_at");
	variable_del("google_analytics_api_refresh_token");
	variable_del("google_analytics_api_full_token");
	variable_del("google_analytics_api_profile_id");
  }
  catch (Exception $e) {
  }
	variable_del("google_analytics_api_client_id");
	variable_del("google_analytics_api_client_secret");
	variable_del("google_analytics_api_access_token");
	variable_del("google_analytics_api_expires_at");
	variable_del("google_analytics_api_refresh_token");
	variable_del("google_analytics_api_full_token");
	variable_del("google_analytics_api_profile_id");
}

/**
* Returns an authenticated gapi or NULL if no authentication has taken place
*
* @throws Exception if authentication fails 
* @return gapi or NULL if no authentication has taken place
**/
function google_analytics_api_gapi() {
  if (user_access('administer Google Analytics settings')) {
	if (variable_get('google_analytics_api_full_token', NULL)) {
    	if (variable_get('google_analytics_api_access_token', NULL) && time() < variable_get('google_analytics_api_expires_at', NULL)) {
			// If the access token is still valid, authenticate the user with that
			
			return gapiOAuth2::withToken(variable_get('google_analytics_api_full_token', NULL));
		}
		else if (variable_get('google_analytics_api_refresh_token', NULL)) {
			// If the site has an access token and refresh token, but the
			// access token has expired, authenticate the user with the
			// refresh token
			
			$client_id = variable_get('google_analytics_api_client_id', NULL);
			$client_secret = variable_get('google_analytics_api_client_secret', NULL);
			$refresh_token = variable_get('google_analytics_api_refresh_token', NULL);
			
			try {
				$gapi = gapiOAuth2::withRefreshToken($client_id, $client_secret, $refresh_token);
			
				variable_set("google_analytics_api_access_token", $gapi->getToken());
				variable_set("google_analytics_api_expires_at", $gapi->getExpiresAt());
				variable_set("google_analytics_api_full_token", $gapi->getFullToken());
				return $gapi;
			}
			catch (Exception $e) {
				drupal_set_message(t("There was an authentication error. Message: " . $e->getMessage()), 'error', false);
				return NULL;
			}
		}
	}
	else if (isset($_GET['code'])) {
		// If there is no access token or refresh token and client is returned
		// to the config page with an access code, complete the authentication
		
		$client_id = variable_get('google_analytics_api_client_id', NULL);
		$client_secret = variable_get('google_analytics_api_client_secret', NULL);
		
		try {
			$gapi = gapiOAuth2::authenticate($client_id, $client_secret);
		
			variable_set('google_analytics_api_access_token', $gapi->getToken());
			variable_set('google_analytics_api_expires_at', $gapi->getExpiresAt());
			variable_set('google_analytics_api_refresh_token', $gapi->getRefreshToken());
			variable_set('google_analytics_api_full_token', $gapi->getFullToken());
		
			drupal_set_message(t('You have granted access to your Google account. Drupal will be able to download information from the account until you revoke access.'));
		    drupal_goto(gapiUrl::currentUrlWithoutGet());	
		}
		catch (Exception $e) {
			drupal_set_message(t("There was an authentication error. Message: " . $e->getMessage()), 'error', false);
			return NULL;
		}
	}
	else {
		return NULL;
	}
}
}

/*
 * Request account data (profile IDs and names).
 */
function google_analytics_api_account_data() {
	return google_analytics_api_gapi()->requestAccountData();
}

/**
 * Request report data.
 * @param $request['#dimensions']  required
 * @param $request['#metrics']     required
 * @param $request['#sort_metric'] optional [default=none]
 * @param $request['#filter']      optional [default=none]
 * @param $request['#start_date']  optional [default=GA release date]
 * @param $request['#end_date']    optional [default=today]
 * @param $request['#start_index'] optional [default=1]
 * @param $request['#max_results'] optional [default=10,000]
 * 
 * @param $cid                     required 
 *   A unique cid for this request, you can re-use the same
 *   cid if you are making the same query in more than
 *   one place and want to re-use the results.
 * @param $expire                  optional
 *   The time to expire this cid, defaults to CACHE_NORMAL.
 * @param $refresh                 optional
 *   Use to force a fresh request even if there is cached data.
 **/
function google_analytics_api_report_data($request, $cid = NULL, $expire = NULL, $refresh = FALSE) {

  $gapi = google_analytics_api_gapi();
  if (!$gapi) {
	drupal_set_message(t('A Google Analytics API method has been called that requires the selection of a Google Analytics profile.  Please visit the ' . l('administration page', 'admin/settings/google-analytics-api') . ' to set one.'), 'status', false);
    return FALSE;
  }

  // Use the request object to generate a cache id. This lets us cache per request.
  if (!$cid) { 
    // Recursively iterate over the array to flatten it
    $flattened = array();
    $iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($request));
    foreach ($iterator as $value) { 
      $flattened[] = $value;
    }
    $cid = md5(implode('', $flattened));
  }

  $cache = cache_get($cid);
  if (!$refresh && isset($cache) && !empty($cache->data)) {
    $data = $cache->data;
  }
  else { 
    try {
      // Make sure parameters are all there with a default value.
      $params = array(
        '#dimension' => NULL,
        '#metrics' => NULL,
        '#sort_metric' => NULL,
        '#filter' => NULL,
        '#start_date' => NULL,
        '#end_date' => NULL,
        '#start_index' => 1,
        '#max_results' => 10000,
      );
      foreach ($params as $name => $value) {
        if (!isset($request[$name])) {
          $request[$name] = $value;
        }
      }

      $profile_id = variable_get('google_analytics_api_profile_id', 0);
      drupal_alter('google_analytics_api_profile', $profile_id);

      $data = google_analytics_api_gapi()->requestReportData(
        $profile_id,
        $request['#dimensions'], $request['#metrics'], $request['#sort_metric'],
        $request['#filter'], $request['#start_date'], $request['#end_date'],
        $request['#start_index'], $request['#max_results']);
        if (empty($expire)) {
          $expire = CACHE_NORMAL;
        }
        cache_set($cid, $data, 'cache', $expire);
    }
    catch (Exception $e) {
      watchdog('google_analytics_api', t('Google Analytics API: cid @cid @message', array('@cid' => $cid, '@message' => $e->getMessage())));
      return FALSE;
    }
  }

  return $data;
}
